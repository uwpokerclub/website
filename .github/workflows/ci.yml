name: "Continuous Integration"

on:
  push:
    paths:
      - "**"
  merge_group:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Build image
        run: docker build -t website:${{ github.sha }} .
      - name: Save image
        run: docker save -o website.tar website:${{ github.sha }}
      - name: Upload image to cache
        uses: actions/upload-artifact@v4
        with:
          name: website-image
          path: website.tar

  webapp-tests:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: webapp
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install dependencies
        run: npm ci
      - name: Lint source code
        run: npm run lint
      - name: Run tests
        run: npm test

  server-tests:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
      - name: Start PostgreSQL container
        run: docker run --name postgres -e POSTGRES_PASSWORD=password -e POSTGRES_DB=uwpokerclub_test -p 5432:5432 -d postgres:13.7-alpine
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              break
            fi
            sleep 1
          done
      - name: Install dependencies
        run: |
          go mod download
          go install github.com/pressly/goose/v3/cmd/goose@v3.15.1
      - name: Run database migrations
        run: ./scripts/migrate.sh --test up
        env:
          TEST_DATABASE_URL: postgres://postgres:password@localhost:5432/uwpokerclub_test
      - name: Run tests
        run: go test -v -p=1 ./internal/...
        env:
          TEST_DATABASE_URL: postgres://postgres:password@localhost:5432/uwpokerclub_test

  e2e:
    runs-on: ubuntu-latest
    needs: [build, webapp-tests, server-tests]
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
      - name: Install dependencies
        run: npm ci
      - name: Download image from cache
        uses: actions/download-artifact@v5
        with:
          name: website-image
      - name: Load image
        run: docker load -i website.tar
      - name: Setup Docker network
        run: docker network create uwpokerclub_services_network
      - name: Start PostgreSQL container
        run: docker run --name postgres --network uwpokerclub_services_network -e POSTGRES_PASSWORD=password -e POSTGRES_DB=uwpokerclub -p 5432:5432 -d postgres:13.7-alpine
      - name: Wait for PostgreSQL to be ready
        run: |
          ready=false
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              ready=true
              break
            fi
            sleep 1
          done
          if [ "$ready" = false ]; then
            echo "PostgreSQL not ready after 30 seconds"
            exit 1
          fi
      - name: Start server
        run: docker run --name server --network uwpokerclub_services_network -e DATABASE_URL=postgres://postgres:password@postgres:5432/uwpokerclub -e DATABASE_TLS_PARAMETERS=?sslmode=disable -e ENVIRONMENT=test -e GIN_MODE=release -e PORT=5000 -p 5000:5000 -d website:${{ github.sha }}
      - name: Wait for server to be ready
        run: |
          ready=false
          for i in {1..30}; do
            if curl -s http://localhost:5000/api/health | grep "ok"; then
              ready=true
              break
            fi
            sleep 1
          done
          if [ "$ready" = false ]; then
            echo "Server not ready after 30 seconds"
            exit 1
          fi
      - name: Run E2E tests
        uses: cypress-io/github-action@v6
        with:
          record: true
          parallel: true
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  push:
    if: github.event_name == 'push'
    needs: e2e
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
    - uses: actions/checkout@v5
    - name: Download image from cache
      uses: actions/download-artifact@v5
      with:
        name: website-image
    - name: Load image
      run: docker load -i website.tar
    - name: Authenticate to GCP
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: '${{ secrets.GCP_WIP }}'
        service_account: '${{ secrets.GCP_SA }}'
    - name: Configure Docker
      run: gcloud auth configure-docker us-east1-docker.pkg.dev
    - name: Tag the image
      run: |
        docker tag website:${{ github.sha }} us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/uwpokerclub-docker/website:$(echo ${{ github.ref_name }} | tr '/' '-')
    - name: Push the image
      run: |
        docker push us-east1-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/uwpokerclub-docker/website:$(echo ${{ github.ref_name }} | tr '/' '-')
